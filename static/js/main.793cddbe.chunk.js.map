{"version":3,"sources":["Components/Card/card.component.jsx","Components/Card-list/card-list.component.jsx","Components/SearchField/search-field.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","props","monster","map","mons","key","SearchField","placeholder","handleonchange","type","onChange","App","onChangeServiceField","e","setState","searchField","target","value","state","fetch","then","response","json","reject","users","this","filteredMonster","filter","m","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iVAGaA,G,YAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,KAAMC,EAAX,EAAWA,MAAX,OAChB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAA1B,4BAClB,4BAAKC,GACL,2BAAIC,MCFCI,G,MAAW,SAACC,GAErB,IAAIC,EAAUD,EAAMC,QACrB,OACK,yBAAKL,UAAW,aACXK,EAAQC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKV,GAAIA,GAAIU,EAAKV,GAAIC,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,cCPlFU,G,MAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,eAAf,OACnB,2BACAX,UAAU,SACVY,KAAK,SACLF,YAAeA,EACfG,SAAWF,MCHEG,E,kDACnB,aAAe,IAAD,8BACZ,gBAYFC,qBAAuB,SAACC,GACpB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvC,EAAKC,MAAO,CACVhB,QAAS,GACTa,YAAa,IAJH,E,gEAQM,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQ,SAAAC,GAAM,MAAI,MAAIH,MAAK,SAAAI,GAAK,OAAI,EAAKV,SAAS,CAACZ,QAASsB,S,+BAQlI,IAAD,EACwBC,KAAKP,MAA7BhB,EADA,EACAA,QAASa,EADT,EACSA,YAEZW,EAAiBxB,EAAQyB,QAAO,SAAAC,GAAC,OAAIA,EAAEjC,KAAKkC,cAAcC,SAASf,EAAYc,kBAEnF,OACE,yBAAKhC,UAAU,OACZ,+CACA,kBAAC,EAAD,CAAaU,YAAc,iBAAiBC,eAAiBiB,KAAKb,uBAClE,kBAAC,EAAD,CAAUV,QAASwB,S,GA3BKK,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.793cddbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = ({id,name, email}) => (\r\n    <div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${id}?set=set2&size=180x180`}></img>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n    \r\n)","import React from 'react';\r\n\r\nimport {Card} from '../Card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => \r\n{\r\n    let monster = props.monster;\r\n   return ( \r\n        <div className =\"card-list\">\r\n            {monster.map(mons => <Card key={mons.id} id={mons.id} name={mons.name} email={mons.email}/>)}\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport './search-field.styles.css';\r\n\r\nexport const SearchField = ({placeholder, handleonchange}) => (\r\n        <input \r\n        className=\"search\" \r\n        type=\"search\" \r\n        placeholder = {placeholder} \r\n        onChange= {handleonchange} \r\n        />\r\n)","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './Components/Card-list/card-list.component';\nimport {SearchField} from './Components/SearchField/search-field.component'\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state ={\n      monster: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json(), reject => \"\").then(users => this.setState({monster: users}) )\n   \n  }\n\n  onChangeServiceField = (e)=> {\n      this.setState({searchField: e.target.value});\n  };\n\n  render() {\n    const {monster, searchField} = this.state;\n\n    let filteredMonster =monster.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n         <h1>Monster Robolex</h1>\n         <SearchField placeholder = 'Search Monster' handleonchange= {this.onChangeServiceField} /> \n         <CardList monster={filteredMonster} />\n      </div>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}